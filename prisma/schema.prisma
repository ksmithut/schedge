// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id
  username             String
  sessions             Session[]
  githubUser           GithubUser?
  reminders            Reminder[]
  clientApplications   ClientApplication[]
  clientAuthorizations ClientAuthorization[]
  authorizationCodes   AuthorizationCode[]
  accessTokens         AccessToken[]
  refreshTokens        RefreshToken[]
}

model Session {
  id        String    @id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime
  expiresAt DateTime
  revokedAt DateTime?
}

model GithubUser {
  id        String @unique
  login     String
  avatarURL String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @id
}

model Reminder {
  id          String    @id
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  label       String
  date        DateTime
  completedAt DateTime?
}

model ClientApplication {
  id                   String                @id
  secretHash           String
  name                 String
  redirectURIs         String
  owner                User                  @relation(fields: [ownerId], references: [id])
  ownerId              String
  clientAuthorizations ClientAuthorization[]
  authorizationCodes   AuthorizationCode[]
  accessTokens         AccessToken[]
  refreshTokens        RefreshToken[]
}

model ClientAuthorization {
  client              ClientApplication @relation(fields: [clientApplicationId], references: [id])
  clientApplicationId String
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  scope               String
  createdAt           DateTime

  @@id([clientApplicationId, userId])
}

model AuthorizationCode {
  code                String            @id
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  client              ClientApplication @relation(fields: [clientApplicationId], references: [id])
  clientApplicationId String
  createdAt           DateTime
  expiresAt           DateTime
}

model RefreshToken {
  id                  String            @id
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  client              ClientApplication @relation(fields: [clientApplicationId], references: [id])
  clientApplicationId String
  expiresAt           DateTime
  consumedAt          DateTime?
}

model AccessToken {
  id                  String            @id
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  client              ClientApplication @relation(fields: [clientApplicationId], references: [id])
  clientApplicationId String
  expiresAt           DateTime
}
